Summary:
=======
1. Purpose
2. Yaml description for each application
3. File tree
4. Example of application description

1. Purpose:
-----------
Propose a generic way to describe an application and easily add it on the
demo_launcher.
To permit a better and dynamic management of application, each application is
described on a yaml file.

2. Yaml description for each application:
-----------------------------------------
Format:
Application:
    Name: <name of application>
    Description: <description of application>
    Icon: <icon of application>
    Type: <script|python>
    Board:
        <List|NotList>: <all|list of chip>
    Script:
        Exist:
            <File|Command>: <file or command to verify>
            Msg_false: <Message to display if <File|Command> are not true
        Start: <script or application to launch application>
    Python:
        Exist:
            <File|Command>: <file or command to verify>
            Msg_false: <Message to display if <File|Command> are not true
        Module: <Python module name to load>
    Action:
        button_release_event: <python_start|script_management>
        button_press_event: highlight_eventBox
    Installer:
        Type: <installer|uninstaller|launcher|demo>

Explanation:
- Name: name of application displayed on demo_launcher
- Description: description of application displayed on demo_launcher
- Icon: icon of application displayed on demo_launcher
- Board: define which boards the application is compatible with
    List: list of chip/soc the application is compatible with
    NotList: List of chip/soc the application is NOT compatible with
- Type: Type of script to launch the application,
        type available:
            * "script": shell script or application (without parameters) to execute
            * "python": Python script to load for launching application
        These two types have a specific declaration available: Script, Python
- Script: This section is for describing the script (shell or application) to
  launch the application.
  This section has several sub-sections:
    Exist: verify some requirements before launching the start command
    Start: command to start the application

    Exist section:
        File: <verify presence of specific file>
        Command: <command to execute, if return is Ok then we can launch start command>

- Python: This section is for describing the Python script that needs to be
  loaded in order to access the functionalities of the application. The Python
  script must have the function "create_subdialogwindow(<parent window>)"
  This section has several sub-sections:
    Exist: verify some requirements before launching the start command
    Module: Python module name to load, it's corresponding to path and script
    name.
       ex.:
            path = application/netdata/netdata.py
            module name = application.netdata.netdata
        Tips: You need to add an empty file named '__init.py__' to each
              subdirectory in order to allow the launch of the Python module

    Exist section:
        File: <verify presence of specific file>
        Command: <command to execute, if return are Ok then we can launch start command>

- Installer: This section is used to install new applications in the
  demo_launcher through dedicated installers.
  This section has one sub-section:
    Type: Type of installation:
             * 'installer: This value shifts the demo launcher to the installer
                           mode.
             * 'uninstaller: This value shifts the demo launcher to the
                             uninstaller mode.
             * 'launcher': This value shifts the demo installer or uninstaller
                           to the launcher mode.
             * 'demo': This value shows the application is an installer or a
                       uninstaller.

3. File Tree:
------------
application/
├── 000-netdata.yaml
├── 010-camera.yaml
├── 020-video.yaml
├── 030-3d_cube.yaml
├── 040-m4_ai.yaml
├── 060-bluetooth_audio_output.yaml
├── 3d_cube
│   ├── bin
│   │   └── launch_cube_3D.sh
│   └── pictures
│       └── ST153_cube_purple.png
├── bluetooth
│   ├── bluetooth_audio.py
│   ├── __init__.py
│   ├── pictures
│   │   └── ST11012_bluetooth_speaker_light_green.png
│   └── wrap_blctl.py
├── camera
│   ├── bin
│   │   └── launch_camera_preview.sh
│   ├── pictures
│   │   └── ST1077_webcam_dark_blue.png
│   └── shaders
│       └── edge_InvertLuma.fs
├── __init__.py
├── m4_ai
│   ├── bin
│   │   └── launch_AI.sh
│   └── pictures
│       └── ST7079_AI_neural_pink.png
├── netdata
│   ├── bin
│   │   └── build_qrcode.sh
│   ├── __init__.py
│   ├── netdata.py
│   └── pictures
│       └── netdata-icon-192x192.png
└── video
    ├── bin
    │   └── launch_video.sh
    └── pictures
        └── Video_playback_logo.pn

Application installers are stored in the directory 'installer' with the same
structure than the directory 'application'.

4. Example of application:
--------------------------
Example 1:
Application:
    Name: 3D Pict
    Description: GPU with picture
    Icon: application/3d_cube/pictures/ST153_cube_purple.png
    Board:
        NotList: stm32mp151
    Type: script
    Script:
        Exist:
            File: /dev/galcore
            Msg_false: No GPU capabilities to run 3D GPU demo
        Start: application/3d_cube/bin/launch_cube_3D.sh
    Action:
        button_release_event: script_management
        button_press_event: highlight_eventBox

Example 2:
Application:
    Name: Camera
    Description: shader
    Icon: application/camera/pictures/ST1077_webcam_dark_blue.png
    Board:
        List: all
    Type: script
    Script:
        Exist:
            File: /dev/video0
            Msg_false: Webcam is not connected,
                    /dev/video0 doesn't exist
        Start: application/camera/bin/launch_camera_shader.sh
    Action:
        button_release_event: script_management
        button_press_event: highlight_eventBox

Example 3:
Application:
    Name: Bluetooth
    Description: speaker
    Icon: application/bluetooth/pictures/ST11012_bluetooth_speaker_light_green.png
    Type: python
    Board:
        List: stm32mp157 stm32mp153
    Python:
        Exist:
            Command: hciconfig hci0 up
            Msg_false: Please connect a bluetooth controller on the board
        Module: application.bluetooth.bluetooth_audio
    Action:
        button_release_event: python_start
        button_press_event: highlight_eventBox

